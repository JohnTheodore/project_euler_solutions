# The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
require 'prime'

def factors_of(number)
  return [1] if number == 1
  primes, powers = number.prime_division.transpose
  exponents = powers.map{|i| (0..i).to_a}
  divisors = exponents.shift.product(*exponents).map do |powers|
    primes.zip(powers).map{|prime, power| prime ** power}.inject(:*)
  end
  nest = divisors.sort.map{|div| [div, number / div]}
  divs = []
  nest.each do |ar|
    ar.each do |i|
      divs << i
    end
  end
  divs.uniq
end

def triangle_numbers(factors)
  set = [1, 1]
  while true do
    divisors = factors_of(set[-1]).count
    (return set[-1]) if (divisors > factors)
    set[-2] = set[-2] + 1
    set[-1] = set[-1] + set[-2]
  end
end

start = Time.now
answer = triangle_numbers(500)
puts "Found answer: #{answer} in #{Time.now - start} seconds"
# 11.578958749 seconds